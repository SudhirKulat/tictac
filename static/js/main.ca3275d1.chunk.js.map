{"version":3,"sources":["component/Squares.js","component/Board.js","component/Game.js","App.js","serviceWorker.js","index.js"],"names":["Squares","value","onClick","markerClass","className","calculateWinner","squares","lines","i","length","a","b","c","j","Board","props","computerTurn","state","slice","notFilled","isAvailable","push","setTimeout","randomItem","Math","floor","random","xIsNext","setState","isClickable","restartGame","Array","fill","sessionStorage","clear","this","handleClick","winner","Number","getItem","setItem","ai","user","nextRound","reset","winnerName","status-btn","renderSquare","Component","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca3275d1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Squares=({value,onClick})=> {\n    const markerClass = value== \"X\" ? \"x\" :(value==\"O\") ? \"circle\" : \"\";\n    \n    return (\n            <button className={`cell ${markerClass}`} onClick={() => onClick()}></button>\n    )\n}\n\nexport default Squares;","import React, { Component } from 'react'\nimport Squares from './Squares';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true,\n            isClickable: true\n        }\n    }\n    handleClick(i) {\n        if (!this.state.isClickable) {\n            return;\n        }\n        const squares = this.state.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            isClickable: false\n        },()=>{this.computerTurn(i)});\n    }\n\n    computerTurn=()=>{\n        const squares = this.state.squares.slice(); \n        if (calculateWinner(squares)) {\n            return;\n        }\n        let notFilled = [];\n        let isAvailable = false;\n\n        for (let i = 0; i < 9; i++) {\n            if(this.state.squares[i]==null){\n                notFilled.push(i);\n                isAvailable = true;\n            }\n        }\n\n        if (isAvailable) {\n            setTimeout(() => { \n                var randomItem = notFilled[Math.floor(Math.random() * notFilled.length)];\n                squares[randomItem] = this.state.xIsNext ? 'X' : 'O';\n                this.setState({\n                    squares: squares,\n                    xIsNext: !this.state.xIsNext,\n                    isClickable: true\n                });\n            }, 1000);\n        }\n    }\n\n    renderSquare(i){\n        return <Squares \n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n        />\n    }\n\n    restartGame=()=>{\n        this.setState({\n            squares: Array(9).fill(null),\n            xIsNext: true,\n            isClickable: true\n        });\n        sessionStorage.clear();\n    }\n    \n\n    nextRound(winner){\n        if(winner==\"user\"){\n            let curentScoreUser = Number(sessionStorage.getItem('user'))\n            let b=curentScoreUser+1;\n            sessionStorage.setItem('user', b);\n        }\n        if(winner=='AI'){\n            let curentScoreAI = Number(sessionStorage.getItem('ai'))\n            let a= curentScoreAI+1;\n            sessionStorage.setItem('ai', a);\n        }\n        this.setState({\n            squares: Array(9).fill(null),\n            xIsNext: true,\n            isClickable: true\n        });\n    }\n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let ai=Number(sessionStorage.getItem('ai'));\n        let user =Number(sessionStorage.getItem('user'));\n        if(ai==null || user==null){\n            ai = 0;\n            user = 0;\n        }\n        let status = winner =='X'? user+=1:(winner=='O')? ai +=1:'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        let nextRound,reset;\n        if(winner){\n            let winnerName;\n            winner=='X' ? winnerName=\"user\": (winner=='O')?winnerName=\"AI\":winnerName='DRAW'\n            nextRound= <button onClick={(winner)=>this.nextRound(winnerName)}>Next Round</button>;\n            reset= <button onClick={this.restartGame}>Reset</button>;\n        }\n        return (\n            <div className=\"game-container\">\n                <div className=\"status\">\n                    <p>\n                        <span>Alex</span>\n                        <button status-btn>{user+\"-\"+ai}</button>\n                        <span>AI</span>\n\n                    </p>\n                </div>\n                <div className=\"board\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n                <div className=\"restart-game\">\n                    <p>{winner=='X'?'Alex won the game':(winner=='O')?'AI won the game':''}</p>\n                    <p>{winner==\"DRAW\"?\"Its Draw\":\"\"}</p>\n                    {nextRound}{reset}\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    // return null;\n    for(let j = 0; j < squares.length; j++) {\n        if (squares[j] == null) {\n          return null;\n        }\n     }\n     return \"DRAW\";\n}\n\nexport default Board;\n","import React, { Component } from 'react'\nimport Board from './Board'\n\nclass Game extends Component {\n    render() {\n        return (\n          <div className=\"game\">\n            <div className=\"game-board\">\n            <Board />\n            </div>\n          </div>\n        );\n      }\n}\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './component/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
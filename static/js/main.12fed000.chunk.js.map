{"version":3,"sources":["component/Squares.js","component/Board.js","component/Game.js","component/Home.js","App.js","serviceWorker.js","index.js"],"names":["Squares","value","onClick","markerClass","className","calculateWinner","squares","lines","i","length","a","b","c","j","Board","props","computerTurn","state","slice","notFilled","isAvailable","push","setTimeout","randomItem","Math","floor","random","xIsNext","setState","isClickable","restartGame","Array","fill","sessionStorage","clear","player","this","handleClick","winner","Number","getItem","setItem","ai","user","nextRound","reset","winnerName","status-btn","renderSquare","to","Component","Game","para","match","params","id","Home","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12fed000.chunk.js","sourcesContent":["import React from 'react'\n\nconst Squares=({value,onClick})=> {\n    const markerClass = value== \"X\" ? \"x\" :(value==\"O\") ? \"circle\" : \"\";\n    \n    return (\n            <button className={`cell ${markerClass}`} onClick={() => onClick()}></button>\n    )\n}\n\nexport default Squares;","import React, { Component } from 'react'\nimport Squares from './Squares';\nimport { Route, BrowserRouter as Router, Switch, Link } from 'react-router-dom'\n\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true,\n            isClickable: true,\n            player: this.props.player\n        }\n    }\n    handleClick(i) {\n        if (!this.state.isClickable) {\n            return;\n        }\n        const squares = this.state.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        if(this.state.player==\"ai\"){\n            this.setState({\n                squares: squares,\n                xIsNext: !this.state.xIsNext,\n                isClickable: false\n            },()=>{this.computerTurn(i)});\n        }\n        else{\n            this.setState({\n                squares: squares,\n                xIsNext: !this.state.xIsNext,\n                isClickable: true\n            });\n        }\n        \n    }\n    \n        computerTurn=()=>{\n            const squares = this.state.squares.slice(); \n            if (calculateWinner(squares)) {\n                return;\n            }\n            let notFilled = [];\n            let isAvailable = false;\n    \n            for (let i = 0; i < 9; i++) {\n                if(this.state.squares[i]==null){\n                    notFilled.push(i);\n                    isAvailable = true;\n                }\n            }\n    \n            if (isAvailable) {\n                setTimeout(() => { \n                    var randomItem = notFilled[Math.floor(Math.random() * notFilled.length)];\n                \n                    squares[randomItem] = this.state.xIsNext ? 'X' : 'O';\n                    this.setState({\n                        squares: squares,\n                        xIsNext: !this.state.xIsNext,\n                        isClickable: true\n                    });\n                }, 1000);\n            }\n        }\n\n\n    renderSquare(i){\n        return <Squares \n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n        />\n    }\n\n    restartGame=()=>{\n        this.setState({\n            squares: Array(9).fill(null),\n            xIsNext: true,\n            isClickable: true\n        });\n        sessionStorage.clear();\n    }\n    \n\n    nextRound(winner){\n        if(winner==\"user\"){\n            let curentScoreUser = Number(sessionStorage.getItem('user'))\n            let b=curentScoreUser+1;\n            sessionStorage.setItem('user', b);\n        }\n        if(winner=='AI'){\n            let curentScoreAI = Number(sessionStorage.getItem('ai'))\n            let a= curentScoreAI+1;\n            sessionStorage.setItem('ai', a);\n        }\n        this.setState({\n            squares: Array(9).fill(null),\n            xIsNext: true,\n            isClickable: true\n        });\n    }\n\n    reset(){\n        sessionStorage.clear();\n    }\n    render() {\n        let player = this.state.player==\"ai\"?\"AI\":\"Friend\"\n        const winner = calculateWinner(this.state.squares);\n        let ai=Number(sessionStorage.getItem('ai'));\n        let user =Number(sessionStorage.getItem('user'));\n        if(ai==null || user==null){\n            ai = 0;\n            user = 0;\n        }\n\n        let status = winner =='X'? user+=1:(winner=='O')? ai +=1:'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        let nextRound,reset;\n        if(winner){\n            let winnerName;\n            winner=='X' ? winnerName=\"user\": (winner=='O')?winnerName=\"AI\":winnerName='DRAW'\n            nextRound= <button onClick={(winner)=>this.nextRound(winnerName)} className=\"next-btn\">Next Round</button>;\n            reset= <button onClick={this.restartGame} className=\"reset-btn\">Reset</button>;\n        }\n\n        return (\n            <div className=\"game-container\">\n                <div className=\"status\">\n                    <p>\n                        <span>Alex</span>\n                        <button status-btn>{user+\"-\"+ai}</button>\n                        <span>{player}</span>\n\n                    </p>\n                </div>\n                <div className=\"board\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n                <div className=\"restart-game\">\n                    <p>{winner=='X'?'Alex won the game':(winner=='O')?`${this.state.player} won the game`:''}</p>\n                    <p>{winner==\"DRAW\"?\"Its Draw\":\"\"}</p>\n                    {nextRound}{reset}\n                    <p><Link to=\"/\" onClick={()=>this.reset()}className=\"custom-btn btn-friend\">Home</Link></p>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    \n    for(let j = 0; j < squares.length; j++) {\n        if (squares[j] == null) {\n            return null;\n        }\n    }\n    return \"DRAW\";\n}\n\nexport default Board;\n","import React, { Component } from 'react'\nimport Board from './Board'\n\nclass Game extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      para:this.props.match.params.id\n    }\n  }\n  \n    render() {\n      const player = this.state.para==\"ai\"?\"ai\":(this.state.para==\"friend\")?\"friend\":\"\";\n        return (\n          <div className=\"game\">\n            <div className=\"game-board\">\n            <Board player={player}/>\n            </div>\n          </div>\n        );\n      }\n}\nexport default Game;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Home=()=> {\n    return (\n        <div className=\"home\">\n            \n            <p className=\"marker-icon\">\n                <span className=\"cell x marker-selection\"></span>\n                <span className=\"cell circle marker-selection\"></span>\n            </p>\n            <p>Choose your play mode</p>\n            <div className=\"select-btn\">\n                <Link to=\"/ai\" className=\"custom-btn btn-ai\">with AI</Link>\n            </div>\n            <div className=\"select-btn\">\n                <Link to=\"/friend\" className=\"custom-btn btn-friend\">with a friend</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Game from './component/Game';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Home from './component/Home';\nimport Board from './component/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/tictac\" component={Home} />\n          <Route path='/:id' component={Game} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}